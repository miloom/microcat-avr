/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_ENCODER_PB_H_INCLUDED
#define PB_ENCODER_PB_H_INCLUDED
#include "src/nanopb/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum location {
    LOCATION_FRONT_RIGHT = 0,
    LOCATION_BACK_RIGHT = 1,
    LOCATION_BACK_LEFT = 2,
    LOCATION_FRONT_LEFT = 3
} location_t;

/* Struct definitions */
typedef struct encoder_data {
    location_t location;
    int32_t position;
} encoder_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _LOCATION_MIN LOCATION_FRONT_RIGHT
#define _LOCATION_MAX LOCATION_FRONT_LEFT
#define _LOCATION_ARRAYSIZE ((location_t)(LOCATION_FRONT_LEFT+1))

#define encoder_data_t_location_ENUMTYPE location_t


/* Initializer values for message structs */
#define ENCODER_DATA_INIT_DEFAULT                {_LOCATION_MIN, 0}
#define ENCODER_DATA_INIT_ZERO                   {_LOCATION_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ENCODER_DATA_LOCATION_TAG                1
#define ENCODER_DATA_POSITION_TAG                2

/* Struct field encoding specification for nanopb */
#define ENCODER_DATA_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    location,          1) \
X(a, STATIC,   SINGULAR, SINT32,   position,          2)
#define ENCODER_DATA_CALLBACK NULL
#define ENCODER_DATA_DEFAULT NULL

extern const pb_msgdesc_t encoder_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ENCODER_DATA_FIELDS &encoder_data_t_msg

/* Maximum encoded size of messages (where known) */
#define ENCODER_DATA_SIZE                        8
#define ENCODER_PB_H_MAX_SIZE                    ENCODER_DATA_SIZE

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
