/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_IMU_PB_H_INCLUDED
#define PB_IMU_PB_H_INCLUDED
#include "src/nanopb/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct gyro_data {
    float x;
    float y;
    float z;
} gyro_data_t;

typedef struct accel_data {
    float x;
    float y;
    float z;
} accel_data_t;

typedef struct telemetry {
    bool has_gyro;
    gyro_data_t gyro;
    bool has_accel;
    accel_data_t accel;
} telemetry_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define GYRO_DATA_INIT_DEFAULT                   {0, 0, 0}
#define ACCEL_DATA_INIT_DEFAULT                  {0, 0, 0}
#define TELEMETRY_INIT_DEFAULT                   {false, GYRO_DATA_INIT_DEFAULT, false, ACCEL_DATA_INIT_DEFAULT}
#define GYRO_DATA_INIT_ZERO                      {0, 0, 0}
#define ACCEL_DATA_INIT_ZERO                     {0, 0, 0}
#define TELEMETRY_INIT_ZERO                      {false, GYRO_DATA_INIT_ZERO, false, ACCEL_DATA_INIT_ZERO}

/* Field tags (for use in manual encoding/decoding) */
#define GYRO_DATA_X_TAG                          1
#define GYRO_DATA_Y_TAG                          2
#define GYRO_DATA_Z_TAG                          3
#define ACCEL_DATA_X_TAG                         1
#define ACCEL_DATA_Y_TAG                         2
#define ACCEL_DATA_Z_TAG                         3
#define TELEMETRY_GYRO_TAG                       1
#define TELEMETRY_ACCEL_TAG                      2

/* Struct field encoding specification for nanopb */
#define GYRO_DATA_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3)
#define GYRO_DATA_CALLBACK NULL
#define GYRO_DATA_DEFAULT NULL

#define ACCEL_DATA_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3)
#define ACCEL_DATA_CALLBACK NULL
#define ACCEL_DATA_DEFAULT NULL

#define TELEMETRY_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gyro,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  accel,             2)
#define TELEMETRY_CALLBACK NULL
#define TELEMETRY_DEFAULT NULL
#define telemetry_t_gyro_MSGTYPE gyro_data_t
#define telemetry_t_accel_MSGTYPE accel_data_t

extern const pb_msgdesc_t gyro_data_t_msg;
extern const pb_msgdesc_t accel_data_t_msg;
extern const pb_msgdesc_t telemetry_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define GYRO_DATA_FIELDS &gyro_data_t_msg
#define ACCEL_DATA_FIELDS &accel_data_t_msg
#define TELEMETRY_FIELDS &telemetry_t_msg

/* Maximum encoded size of messages (where known) */
#define ACCEL_DATA_SIZE                          15
#define GYRO_DATA_SIZE                           15
#define IMU_PB_H_MAX_SIZE                        TELEMETRY_SIZE
#define TELEMETRY_SIZE                           34

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
